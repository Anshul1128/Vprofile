pipeline{
    agent any
    tools{
        maven "MAVEN3"
        jdk "OracleJDK11"
    }
    environment {
        registryCredential = 'ecr:ap-south-1:awscreds'
        appRegistry = "153162545403.dkr.ecr.ap-south-1.amazonaws.com/vprofileappimg"
        vprofileRegistry = "https://153162545403.dkr.ecr.ap-south-1.amazonaws.com"
        cluster = "vprofile"
        service = "vprofileappsvc"
    }

    stages {
        stage('Fetch Code'){
            steps{
                git branch: 'docker', url: 'https://github.com/Anshul1128/Vprofile.git'
            }
        }
        stage('Build'){
            steps{
                sh 'mvn install -DskipTests'
            }
            post{
                success{
                    echo'archiving atifacts now...'
                    archiveArtifacts artifacts: '**/*.war'
                }
            }
        }
        stage('Unit Test'){
            steps{
                sh 'mvn test'
            }
        }
        stage('Checkstyle Analysis'){
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
        }
        stage('Sonar Analysis') {
            environment {
                scannerHome = tool 'sonar4.7'
            }
            steps {
               withSonarQubeEnv('sonar') {
                   sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
              }
            }
        }
        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Build App Image') {
            steps {       
                script {
                    dockerImage = docker.build( appRegistry + ":$BUILD_NUMBER", "./Docker-files/app/multistage/")
                }
            }    
        }
        stage('Upload App Image') {
            steps{
                script {
                    docker.withRegistry( vprofileRegistry, registryCredential ) {
                    dockerImage.push("$BUILD_NUMBER")
                    dockerImage.push('latest')
                    }
                }
            }
        }
        stage('Deploy to ECS'){
            steps{
                withAWS(credentials: 'awscreds', region: 'ap-south-1') {
                sh 'aws ecs update-service --cluster ${cluster} --service ${service} --force-new-deployment'
                }
            }
        }
    }    
    post {
        always {
            // Send Slack notification
            // echo 'Slack Notifications.'
            slackSend(
                
                color: 'good',  // Notification color (good, warning, danger)
                channel: '#jenkinscicd',  // Slack channel
                message: "Build ${currentBuild.fullDisplayName} has completed successfully.",
                teamDomain: 'vprofile-gwd9993',  // Slack team domain
                tokenCredentialId: 'slacktoken'  // Credential ID for the Slack integration token
            )
        }
    }
}